📦
64378 /agent/index.js.map
71576 /agent/index.js
✄
{"version":3,"file":"index.js","sourceRoot":"D:/iOS-Nachtest/2025-04_teamwire/frida-ios-cipher/","sources":["agent/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFA6BwF;AACxF,QAAQ;AACR,MAAM,aAAa,GAAG;IAClB,QAAQ,EAAE,IAAI;IACd,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,eAAe,EAAE,GAAG;QACpB,YAAY,EAAE,KAAK;QACnB,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,EAAE;KACf;IACD,MAAM,EAAE;QACJ,QAAQ,EAAE,KAAK;QACf,oBAAoB,EAAE,GAAG;QACzB,YAAY,EAAE,KAAK;QACnB,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,EAAE;KACf;IACD,MAAM,EAAE;QACJ,QAAQ,EAAE,KAAK;QACf,oBAAoB,EAAE,GAAG;QACzB,YAAY,EAAE,KAAK;QACnB,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,IAAI;QACX,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,EAAE;KACf;IACD,OAAO,EAAE;QACL,QAAQ,EAAE,KAAK;QACf,YAAY,EAAE,KAAK;QACnB,QAAQ,EAAE,EAAE;KACf;IACD,UAAU,EAAE;QACR,QAAQ,EAAE,KAAK;QACf,eAAe,EAAE,GAAG;QACpB,YAAY,EAAE,KAAK;QACnB,mBAAmB,EAAE,IAAI;QACzB,QAAQ,EAAE,EAAE;KACf;CACJ,CAAA;AACD,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC;AAEzC,OAAO,CAAC,GAAG,EAAE,CAAC;AAEd,QAAQ;AACR,MAAM,MAAM,GAAG;IACX,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACzD,MAAM,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACnD,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IAClD,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACrD,WAAW,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACxD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACpD,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACtD,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;IACrD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACrD,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACnD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACrD,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACtD,MAAM,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACpD,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACvD,MAAM,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACpD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACrD,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACvD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACrD,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACvD,UAAU,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACxD,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACtD,WAAW,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACzD,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;IACtD,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;CAC1D,CAAC;AAEF,MAAM,oBAAoB,GAAG,EAAE,CAAA;AAC/B,MAAM,oBAAoB,GAAG,EAAE,CAAA;AAC/B,MAAM,oBAAoB,GAAG,EAAE,CAAA;AAC/B,MAAM,qBAAqB,GAAG,EAAE,CAAC;AACjC,MAAM,uBAAuB,GAAG,EAAE,CAAC;AACnC,MAAM,uBAAuB,GAAG,EAAE,CAAC;AACnC,MAAM,uBAAuB,GAAG,EAAE,CAAC;AACnC,MAAM,uBAAuB,GAAG,EAAE,CAAC;AAEnC,MAAM,WAAW,GAA8B;IAC3C,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,SAAS,CAAA,gCAAgC;CAC/C,CAAC;AACF,MAAM,WAAW,GAA8B;IAC3C,CAAC,EAAE,iBAAiB;IACpB,CAAC,EAAE,iBAAiB;IACpB,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,iBAAiB;IACpB,CAAC,EAAE,iBAAiB;IACpB,CAAC,EAAE,sBAAsB;CAC5B,CAAC;AAEF,MAAM,SAAS,GAA8B;IACzC,2BAA2B;IAC3B,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,uBAAuB;IAC1B,CAAC,EAAE,kBAAkB;IACrB,0CAA0C;CAC7C,CAAC;AACF,MAAM,MAAM,GAA8B;IACtC,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,WAAW;IACd,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,CAAC,EAAE,YAAY;IACf,EAAE,EAAE,aAAa;IACjB,EAAE,EAAE,YAAY;IAChB,EAAE,EAAE,YAAY;CACnB,CAAA;AACD,MAAM,SAAS,GAA8B;IACzC,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE,gBAAgB;IACnB,EAAE,EAAE,WAAW,CAAA,kBAAkB;CACpC,CAAA;AACD,MAAM,aAAa,GAA8B;IAC7C,MAAM,EAAE,qBAAqB;IAC7B,MAAM,EAAE,qBAAqB;CAChC,CAAA;AACD,MAAM,SAAS,GAA8B;IACzC,EAAE,EAAE,oCAAoC;IACxC,EAAE,EAAE,iCAAiC;IACrC,EAAE,EAAE,kBAAkB;IACtB,CAAC,EAAE,qCAAqC;IACxC,CAAC,EAAE,mBAAmB;IACtB,CAAC,EAAE,mCAAmC;IACtC,GAAG,EAAE,kBAAkB;IACvB,GAAG,EAAE,kBAAkB;IACvB,EAAE,EAAE,uBAAuB;CAC9B,CAAA;AACD,MAAM,eAAe,GAA8B;IAC/C,CAAC,EAAE,gBAAgB;IACnB,CAAC,EAAE,eAAe;IAClB,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,kBAAkB;IACrB,CAAC,EAAE,kBAAkB;CACxB,CAAA;AACD,MAAM,qBAAqB,GAA8B;IACrD,CAAC,EAAE,qBAAqB;IACxB,CAAC,EAAE,oBAAoB;IACvB,CAAC,EAAE,uBAAuB;IAC1B,CAAC,EAAE,uBAAuB;IAC1B,CAAC,EAAE,uBAAuB;IAC1B,CAAC,EAAE,uBAAuB;CAC7B,CAAA;AAED,MAAM,uBAAuB,GAA8B;IACvD,CAAC,EAAE,mBAAmB;IACtB,CAAC,EAAE,qBAAqB;IACxB,CAAC,EAAE,qBAAqB;IACxB,CAAC,EAAE,qBAAqB;IACxB,CAAC,EAAE,qBAAqB;CAC3B,CAAA;AACD,MAAM,gBAAgB,GAA8B;IAChD,CAAC,EAAE,WAAW;CACjB,CAAA;AAED,SAAS,WAAW,CAAC,SAAc;IAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE,UAAU,KAAU;QAC7D,OAAO,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACf,CAAC;AACD,aAAa;AACb,SAAS,SAAS,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,MAAM,GAAG,IAAI,EAAE,OAAa,IAAI;IAChE,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI;QACA,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;YAAE,OAAO,IAAI,CAAC;QAChE,IAAI,IAAI,EAAE;YACN,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;SACzD;aAAM;YACH,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;SAC7B;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,YAAY,KAAK,EAAE;YACpB,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;SAC7C;QACD,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC;KACxB;IACD,IAAI,MAAM,IAAI,IAAI,EAAE;QAChB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC;aAC1B,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,YAAY,CAAC,GAAkB;IACpC,IAAI;QACA,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAC7C,OAAO,CAAC,CAAC;SACZ;QACD,OAAO,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;KACvC;IAAC,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,YAAY,KAAK,EAAE;YACpB,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;SAChD;QACD,OAAO,CAAC,CAAC;KACZ;AACL,CAAC;AACD,SAAS,eAAe,CAAC,GAAkB;IACvC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;QAC7C,OAAO,IAAI,CAAC;KACf;IACD,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC;AAC7B,CAAC;AACD,SAAS,YAAY,CAAC,OAAsB;IACxC,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAC5B,IAAI,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IACzB,IAAI,GAAG,IAAI,SAAS,EAAE;QAClB,GAAG,GAAG,SAAS,CAAA;KAClB;IACD,OAAO,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,CAAC;AACD,SAAS,SAAS,CAAC,GAAW,EAAE,MAAgB;IAC5C,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;QACtC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACpB;SAAM;QACH,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;YACtB,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;gBAAE,SAAS;YACjD,SAAS,GAAG,IAAI,CAAC;YACjB,IAAI,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,OAAO;aACV;SACJ;QACD,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACpB;KACJ;AAEL,CAAC;AAED,SAAS,SAAS;IACd,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;AACnD,CAAC;AACD,SAAS,UAAU,CAAC,GAAW;IAC3B,aAAa;IACb,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC7B,IAAI,KAAK,CAAC,MAAM,IAAI,EAAE,EAAE;YACpB,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;SACvC;aAAM;YACH,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YACrC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SAC5B;QACD,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnB,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACzB;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAkCD,SAAS,uBAAuB;IAC5B,SAAS,0BAA0B,CAAC,SAAiB;QACjD,QAAQ,SAAS,EAAE;YACf,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC;YACpC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC;YACpC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACxC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;YACrC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC;YACpC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC;YACpC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC;YACzC;gBACI,OAAO,IAAI,CAAC;SACnB;IACL,CAAC;IACD,0BAA0B;IAC1B,4CAA4C;IAC5C,oDAAoD;IACpD,yDAAyD;IACzD,oBAAoB;IACpB,qBAAqB;IACrB,0DAA0D;IAC1D,sDAAsD;IACtD,wBAAwB;IACxB,6CAA6C;IAC7C,4BAA4B;IAC5B,0BAA0B;IAC1B,IAAI,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;IACtE,IAAI,OAAO,IAAI,IAAI,EAAE;QACjB,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACrC,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,OAAO,EACtB;QACI,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,MAAM,GAAG,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACzB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACvF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAmB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAmB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC9G,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnH,IAAI,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC7E,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YACnF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,EAAE,UAAU,MAAM;YACrB,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACzB,IAAI,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;YAChE,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC3E,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YACrG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC9G,IAAI,aAAa,CAAC,MAAM,CAAC,UAAU,EAAE;gBACjC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7K;YACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,kBAAkB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACtF,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;KAEJ,CAAC,CAAC;IACP,IAAI,SAAS,GAAsC,EAAE,CAAC;IACtD,kKAAkK;IAClK,IAAI,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IACtF,IAAI,eAAe,IAAI,IAAI,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAA;QAC7C,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,eAAe,EAC9B;QACI,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7B;QACL,CAAC;QACD,OAAO,EAAE,UAAU,MAAM;YACrB,IAAI,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,KAAK,GAAmB;gBACxB,MAAM,EAAE,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClD,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,EAAE;gBACd,QAAQ,EAAE,CAAC;gBACX,WAAW,EAAE,CAAC;gBACd,WAAW,EAAE,CAAC;gBACd,cAAc,EAAE,CAAC;gBACjB,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,EAAE;gBACf,MAAM,EAAE,EAAE;gBACV,SAAS,EAAE,EAAE;gBACb,aAAa,EAAE,EAAE;gBACjB,SAAS,EAAE,EAAE;gBACb,GAAG,EAAE,EAAE;gBACP,EAAE,EAAE,MAAM;gBACV,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,EAAE;aAChB,CAAC;YACF,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACf,OAAO;aACV;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACzC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,2BAA2B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACjG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,EAAE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACtJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,oBAAoB,EAAE,KAAK,CAAC,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,EAAE,GAAG,GAAG,SAAS,GAAG,GAAG,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAClK,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAChJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC3K,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBACnC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,KAAK,CAAC,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACnJ;iBAAM;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,0BAA0B,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;aAC3F;YACD,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;KACJ,CAAC,CAAC;IACP,0CAA0C;IAC1C,uDAAuD;IACvD,qBAAqB;IACrB,wBAAwB;IACxB,0BAA0B;IAC1B,+DAA+D;IAC/D,kDAAkD;IAClD,2BAA2B;IAC3B,uEAAuE;IACvE,6BAA6B;IAC7B,4CAA4C;IAC5C,8BAA8B;IAC9B,+CAA+C;IAC/C,IAAI,uBAAuB,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;IACtG,IAAI,uBAAuB,IAAI,IAAI,EAAE;QACjC,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAA;QACrD,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,uBAAuB,EACtC;QACI,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aACxB;YACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QACD,OAAO,EAAE,UAAU,MAAM;YACrB,mHAAmH;YACnH,IAAI,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,uCAAuC,GAAG,IAAI,CAAC,CAAC;YAC5D,IAAI,KAAK,GAAmB;gBACxB,MAAM,EAAE,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClD,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,EAAE;gBACd,QAAQ,EAAE,CAAC;gBACX,WAAW,EAAE,CAAC;gBACd,WAAW,EAAE,CAAC;gBACd,cAAc,EAAE,CAAC;gBACjB,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,EAAE;gBACf,MAAM,EAAE,EAAE;gBACV,SAAS,EAAE,EAAE;gBACb,aAAa,EAAE,EAAE;gBACjB,SAAS,EAAE,EAAE;gBACb,GAAG,EAAE,EAAE;gBACP,EAAE,EAAE,MAAM;gBACV,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,EAAE;aAChB,CAAC;YACF,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACf,OAAO;aACV;YACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,mCAAmC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAChH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACvJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC7I,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACvJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,EAAE,KAAK,CAAC,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACjJ,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACxC,IAAI,QAAQ,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBACnD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,QAAQ,GAAG,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBACrH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACjL;YACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACtI,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACjJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC5K,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBACnC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,KAAK,CAAC,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACpJ;iBAAM;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,2BAA2B,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;aAC5F;QACL,CAAC;KACJ,CAAC,CAAC;IACP,8CAA8C;IAC9C,4DAA4D;IAC5D,iEAAiE;IACjE,uEAAuE;IACvE,4DAA4D;IAC5D,2BAA2B;IAC3B,0EAA0E;IAC1E,kEAAkE;IAClE,mEAAmE;IACnE,oDAAoD;IACpD,sEAAsE;IACtE,IAAI,uBAAuB,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;IACtG,IAAI,uBAAuB,IAAI,IAAI,EAAE;QACjC,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAA;QACrD,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,uBAAuB,EAAE;QACxC,OAAO,EAAE,UAAU,IAAI;YACnB,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAC/D,OAAO;QACX,CAAC;QACD,OAAO,EAAE,UAAU,MAAM;YACrB,OAAO;QACX,CAAC;KACJ,CAAC,CAAC;IAEH,kKAAkK;IAClK,IAAI,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IACtF,IAAI,eAAe,IAAI,IAAI,EAAE;QACzB,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC7C,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,eAAe,EAC9B;QACI,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aACxB;YACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QAED,OAAO,EAAE,UAAU,MAAM;YACrB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAmB,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,KAAK,GAAG;oBACJ,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,MAAM;oBACnC,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,EAAE;oBACX,UAAU,EAAE,EAAE;oBACd,QAAQ,EAAE,CAAC;oBACX,WAAW,EAAE,CAAC;oBACd,WAAW,EAAE,CAAC;oBACd,cAAc,EAAE,CAAC;oBACjB,GAAG,EAAE,EAAE;oBACP,MAAM,EAAE,KAAK;oBACb,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,EAAE;oBACf,MAAM,EAAE,EAAE;oBACV,SAAS,EAAE,EAAE;oBACb,aAAa,EAAE,EAAE;oBACjB,SAAS,EAAE,EAAE;oBACb,GAAG,EAAE,EAAE;oBACP,EAAE,EAAE,EAAE;oBACN,KAAK,EAAE,EAAE;oBACT,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,EAAE;iBAChB,CAAC;gBACF,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,sFAAsF,GAAG,IAAI,GAAG,sCAAsC;oBAC7K,sHAAsH,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBACrJ,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,6BAA6B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAClG,KAAK,IAAI,YAAY,IAAI,SAAS,EAAE;oBAChC,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;oBACpC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;wBAChC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,uBAAuB,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;wBAChH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACjH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACjH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC5G,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC/G,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACnH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC/G,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACzG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACxG,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;4BAC9B,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;4BAC9G,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;yBAC9G;wBACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,uBAAuB,EAAE,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAClH;iBACJ;gBACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,iBAAiB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBACtF,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aAC7C;YACD,IAAI,CAAC,KAAK,CAAC,MAAM;gBACb,OAAO;YAEX,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAC9C,IAAI,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC;YACzE,IAAI,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,sBAAsB,GAAG,KAAK,CAAC,IAAI,GAAG,QAAQ,GAAG,OAAO,GAAG,cAAc,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC/I,IAAI,OAAO,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;gBACnC,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;gBACnD,IAAI,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACjD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAA;gBACtD,KAAK,CAAC,QAAQ,IAAI,UAAU,CAAC;aAChC;YACD,IAAI,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC;YAC/E,IAAI,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;YACxD,KAAK,CAAC,cAAc,IAAI,MAAM,CAAC;YAC/B,IAAI,MAAM,GAAG,CAAC,IAAI,iBAAiB,GAAG,CAAC,EAAE;gBACrC,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;gBACrD,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAC1C,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACpD,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;gBAC7D,KAAK,CAAC,WAAW,IAAI,UAAU,CAAC;aACnC;QACL,CAAC;KAEJ,CAAC,CAAC;IACP,wHAAwH;IACxH,IAAI,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;IACpF,IAAI,cAAc,IAAI,IAAI,EAAE;QACxB,OAAO,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;QAC5C,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,cAAc,EAC7B;QACI,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7B;QACL,CAAC;QACD,OAAO,EAAE,UAAU,MAAM;YACrB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAmB,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,OAAO,CAAC,IAAI,CAAC,gDAAgD,GAAG,IAAI,CAAC,CAAC;gBACtE,OAAO;aACV;YACD,IAAI,CAAC,KAAK,CAAC,MAAM;gBACb,OAAO;YACX,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,0BAA0B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAChG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;YAC7E,IAAI,KAAK,CAAC,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE;gBACxD,IAAI,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC;gBAC/E,IAAI,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;gBACxD,KAAK,CAAC,cAAc,IAAI,MAAM,CAAC;gBAC/B,IAAI,MAAM,GAAG,CAAC,IAAI,iBAAiB,GAAG,CAAC,EAAE;oBACrC,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;oBACrD,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBAC1C,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;oBACpD,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;oBAC7D,KAAK,CAAC,WAAW,IAAI,UAAU,CAAC;iBACnC;aACJ;YACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;YACjG,IAAI,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACpB,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC7C,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK;oBACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAA;oBACzD,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;gBACxB,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;aAC7F;YACD,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE;gBACvB,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBACnD,IAAI,SAAS,GAAG,CAAC,CAAC;gBAClB,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,KAAK;oBACpC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAA;oBAC/D,SAAS,IAAI,KAAK,CAAC,GAAG,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,GAAG,KAAK,CAAC,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;gBAC3H,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;aACzH;YACD,IAAI,aAAa,CAAC,MAAM,CAAC,UAAU,EAAE;gBACjC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC/K;YACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,0BAA0B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAChG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;YACpB,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;KAEJ,CAAC,CAAC;AAEX,CAAC;AAeD,SAAS,qBAAqB,CAAC,IAAY,EAAE,MAAc;IACvD,IAAI,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC9D,IAAI,IAAI,IAAI,IAAI,EAAE;QACd,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,CAAC;QACrC,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;QACrB,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACtF,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACxE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC3E,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAA;QAElF,CAAC;QACD,OAAO,EAAE,UAAU,KAAK;YACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,GAAG,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACjH,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC/B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7K;YACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACrF,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;KACJ,CAAC,CAAC;IACH,CAAC;QACG,IAAI,QAAQ,GAAmC,EAAE,CAAA;QACjD,+BAA+B;QAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC;QACxE,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAA;YACzC,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,IAAI,EACnB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,KAAK,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;gBAChF,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBACxC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,GAAG,IAAI,GAAG,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACnG,CAAC;SACJ,CAAC,CAAC;QAEP,gEAAgE;QAChE,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,SAAS,CAAC,CAAC;QAC5E,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC;YAC5C,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,MAAM,EACrB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAC9B,OAAO;iBACV;gBACD,IAAI,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAC5E,IAAI,GAAG,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;oBAC/B,KAAK,CAAC,WAAW,IAAI,GAAG,CAAC;oBACzB,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;oBAC5C,IAAI,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oBACvC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;oBACpD,KAAK,CAAC,QAAQ,IAAI,OAAO,CAAC;iBAC7B;YAEL,CAAC;SACJ,CAAC,CAAC;QAEP,mDAAmD;QACnD,IAAI,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QAC1E,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC,CAAC;YAC3C,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,KAAK,EACpB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YACD,OAAO,EAAE,UAAU,MAAM;gBACrB,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChD,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC;oBAC5C,OAAO;iBACV;gBACD,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,EAAE;oBACrB,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAC3C,OAAO;iBACV;gBACD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC7C,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK;oBACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAA;oBACzD,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;gBACxB,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;gBACjG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBAC7C,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;gBAEzE,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBAChC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;oBACnF,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;oBAChD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;iBAC7F;qBAAM;oBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,uBAAuB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;iBACxF;gBACD,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC/B,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;iBAC/K;gBACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBAEpG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpD,CAAC;SACJ,CAAC,CAAC;IACX,CAAC,CAAC,EAAE,CAAC;AACT,CAAC;AAQD,SAAS,qBAAqB;IAC1B,SAAS,wBAAwB,CAAC,SAAiB;QAC/C,QAAQ,SAAS,EAAE;YACf,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;YACnC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;YAClC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,KAAK,CAAC;gBACF,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC;gBACI,OAAO,IAAI,CAAC;SACnB;IACL,CAAC;IACD,IAAI,IAAI,GAAG,QAAQ,CAAC;IACpB,8HAA8H;IAC9H,IAAI,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC9D,IAAI,IAAI,IAAI,IAAI,EAAE;QACd,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,CAAC;QACrC,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;QACrB,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,MAAM,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACzB,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1H,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YAClF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAExH,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACxE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC3E,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAA;YAC9E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QACD,OAAO,EAAE,UAAU,KAAK;YACpB,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACvG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC3H,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC/B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7K;YACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACrF,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;KACJ,CAAC,CAAC;IACH,CAAC;QACG,IAAI,QAAQ,GAAmC,EAAE,CAAA;QACjD,MAAM;QACN,iEAAiE;QACjE,+CAA+C;QAC/C,IAAI,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC;QACvE,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC;YACzC,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,IAAI,EACnB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,KAAK,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;gBACtL,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,MAAM;oBAAE,OAAO;gBAC1B,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,GAAG,IAAI,GAAG,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC9F,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC9H,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;gBAC1G,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACnI,CAAC;SACJ,CAAC,CAAC;QAEP,MAAM;QACN,8EAA8E;QAC9E,IAAI,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,QAAQ,CAAC,CAAC;QAC3E,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC,CAAC;YAC3C,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,MAAM,EACrB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC;oBAC5C,OAAO;iBACV;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM;oBAAE,OAAO;gBAC1B,IAAI,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAC5E,IAAI,GAAG,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;oBAC/B,KAAK,CAAC,WAAW,IAAI,GAAG,CAAC;oBACzB,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;oBAC5C,IAAI,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oBACvC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;oBACpD,KAAK,CAAC,QAAQ,IAAI,OAAO,CAAC;iBAC7B;YAEL,CAAC;SACJ,CAAC,CAAC;QAEP,MAAM;QACN,sDAAsD;QACtD,IAAI,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,GAAG,OAAO,CAAC,CAAC;QACzE,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;YAC1C,OAAO;SACV;QACD,WAAW,CAAC,MAAM,CAAC,KAAK,EACpB;YACI,OAAO,EAAE,UAAU,IAAI;gBACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC;YACD,OAAO,EAAE,UAAU,MAAM;gBACrB,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7C,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC,CAAC;oBAC3C,OAAO;iBACV;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM;oBAAE,OAAO;gBAC1B,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,EAAE;oBACrB,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAC3C,OAAO;iBACV;gBACD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC7C,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK;oBACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAA;oBACzD,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;gBACxB,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,GAAG,KAAK,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;gBACjG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBAC7C,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;gBAEzE,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,oBAAoB,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;gBACxF,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;gBAChD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC/F,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC/B,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;iBAC/K;gBACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,GAAG,IAAI,GAAG,OAAO,GAAG,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBAEnG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpD,CAAC;SACJ,CAAC,CAAC;IACX,CAAC,CAAC,EAAE,CAAC;AACT,CAAC;AAED,OAAO;AACP,SAAS,sBAAsB;IAC3B,KAAK;IACL,8FAA8F;IAC9F,6DAA6D;IAC7D,kEAAkE;IAClE,mEAAmE;IACnE,IAAI,oBAAoB,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;IAChG,IAAI,oBAAoB,IAAI,IAAI,EAAE;QAC9B,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QAClD,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,oBAAoB,EAAE;QACrC,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7B;QACL,CAAC;QACD,OAAO,EAAE,UAAU,KAAK;YACpB,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,gCAAgC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC1F,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACxH,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,6BAA6B,EAAE,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC3I,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC7G,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YACpF,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,mBAAmB,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACjI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YAChF,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC7H,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;YACtF,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,qBAAqB,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACnI,IAAI,aAAa,CAAC,KAAK,CAAC,UAAU,EAAE;gBAChC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACnK;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,+BAA+B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzF,SAAS,CAAC,GAAG,EAAE,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;KACJ,CAAC,CAAC;IACH,MAAM;IACN,mFAAmF;IACnF,qFAAqF;IACrF,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACxF,IAAI,gBAAgB,IAAI,IAAI,EAAE;QAC1B,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO;KACV;IACD,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE;QACjC,OAAO,EAAE,UAAU,IAAI;YACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,4BAA4B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAChG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC3H,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,6BAA6B,EAAE,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YAC9I,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC1G,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACtG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC5G,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC3G,CAAC;QACD,OAAO,EAAE,UAAU,KAAK;YACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,kBAAkB,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC1G,IAAI,aAAa,CAAC,KAAK,CAAC,UAAU,EAAE;gBAChC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC7K;YACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,2BAA2B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC/F,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC;KACJ,CAAC,CAAC;AACP,CAAC;AAGD,UAAU;AACV,SAAS,yBAAyB;IAE9B,IAAI,QAAQ,GAAG,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACzC,IAAI,cAAc,GAAG,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAC/C,IAAI,eAAe,GAAG,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAGhD,aAAa;IACb,SAAS,MAAM,CAAC,CAAC;QACb,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAED,aAAa;IACb,SAAS,eAAe,CAAC,CAAC;QACtB;;;WAGG;QAEH,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;YAChB,OAAO,IAAI,CAAC;SACf;QACD,IAAI,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAG,GAAG,CAAC;QACjB,IAAI,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;YACpD,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9B;QACD,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;YACpB,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa;IACb,SAAS,UAAU,CAAC,CAAC;QACjB,IAAI;YACA,CAAC,CAAC,MAAM,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAGD;;6DAEyD;IAEzD;;;;OAIG;IACH,YAAY;IACZ,SAAS,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI;QAC5C,IAAI,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,IAAI,KAAK,IAAI,EAAE;YACf,OAAO,CAAC,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC;SACf;QACD,IAAI,IAAI,KAAK,GAAG,EAAE;YACd,aAAa;YACb,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,CAAC,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,OAAO,CAAC;SAClB;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACjC,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,CAAC,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,OAAO,CAAC;SAClB;IACL,CAAC;IAED;;;;;OAKG;IACH,aAAa;IACb,SAAS,cAAc,CAAC,SAAS;QAC7B,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;YAAE,OAAO,OAAO,CAAC;QACrD,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,MAAM,KAAK,CAAC;YAAE,OAAO,OAAO,CAAC;QAEjC,IAAI,QAAQ,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErC,UAAU;QACV,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;YACxC,qBAAqB;YACrB,OAAO,eAAe,CAAC;SAC1B;QAED,oBAAoB;QACpB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;gBACpC,QAAQ,GAAG,KAAK,CAAC;gBACjB,MAAM;aACT;SACJ;QACD,IAAI,QAAQ;YAAE,OAAO,gBAAgB,CAAC;QAEtC,aAAa;QACb,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;OAEG;IAGH;;6DAEyD;IAEzD;;;;;;;;OAQG;IACH,YAAY;IACZ,SAAS,kBAAkB,CAAC,SAAS,EAAE,MAAM,GAAG,EAAE;QAC9C,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YAAE,OAAO,GAAG,CAAC;QAEpG,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAErC,aAAa;QACb,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC1C,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,wBAAwB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YACzF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,yBAAyB;gBACzB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;aACxG;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,uBAAuB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;SAC3F;QACD,kBAAkB;aACb,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YACpD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,6BAA6B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YAC9F,oBAAoB;YACpB,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;YAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAI,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACjC,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;gBAC1B,wBAAwB;gBACxB,8CAA8C;gBAC9C,IAAI,GAAG,CAAC,UAAU,KAAK,gBAAgB,EAAE;oBACrC,kCAAkC;oBAClC,wEAAwE;oBACxE,mBAAmB;oBACnB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;iBACxG;qBAAM;oBACH,sDAAsD;oBACtD,oBAAoB;oBACpB,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;wBACxC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;wBAC7C,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;wBACzC,QAAQ;wBACR,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;4BAC7B,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;yBAC1I;6BAAM;4BACH,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;yBACxG;qBAEJ;yBAAM;wBACH,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;4BACrF,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,KAAK,GAAG,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;yBAC5F;6BAAM;4BACH,aAAa;4BACb,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,KAAK,GAAG,EAAE,EAAE,IAAI,CAAC,CAAA;yBAC5D;qBACJ;iBACJ;aACJ;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,4BAA4B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;SAChG;QACD,YAAY;aACP,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9C,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBAC3C,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAA;gBACnD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAA;aACrD;iBAAM;gBACH,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;gBAC1B,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;gBAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;gBACpE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAkB,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;gBACnF,aAAa;gBACb,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,gBAAgB,EAAE,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;aACxF;SACJ;QACD,UAAU;aACL;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAA;SACjF;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED;;6DAEyD;IACzD,SAAS,YAAY;QAEjB,IAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;QAE3D,aAAa;QACb,IAAI,cAAc,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAC/E,aAAa;QACb,IAAI,oBAAoB,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAAC,CAAC;QAC3F,aAAa;QACb,IAAI,cAAc,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAC/E,aAAa;QACb,IAAI,aAAa,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;QAC7E,aAAa;QACb,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC,CAAC;QACjF,aAAa;QACb,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAC3E,aAAa;QACb,IAAI,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,0BAA0B,CAAC,CAAC,CAAC;QAC/F,aAAa;QACb,IAAI,yBAAyB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,2BAA2B,CAAC,CAAC,CAAC;QACjG,aAAa;QACb,IAAI,oBAAoB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAAC,CAAC;QACvF,aAAa;QACb,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC;QACvE,aAAa;QACb,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC,CAAC;QACjF,aAAa;QACb,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;QAEjE,mKAAmK;QACnK,aAAa;QACb,IAAI,kCAAkC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,oCAAoC,CAAC,CAAC,CAAC;QACnH,aAAa;QACb,IAAI,8BAA8B,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC,CAAC;QAC3G,aAAa;QACb,IAAI,gDAAgD,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,kDAAkD,CAAC,CAAC,CAAC;QAC/I,aAAa;QACb,IAAI,sCAAsC,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,wCAAwC,CAAC,CAAC,CAAC;QAC3H,aAAa;QACb,IAAI,+CAA+C,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,iDAAiD,CAAC,CAAC,CAAC;QAC7I,aAAa;QACb,IAAI,4CAA4C,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,8CAA8C,CAAC,CAAC,CAAC;QACvI,aAAa;QACb,IAAI,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,0BAA0B,CAAC,CAAC,CAAC;QAG/F,aAAa;QACb,IAAI,mBAAmB,GAAG,iBAAiB,CAAC,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAEvG,IAAI,OAAO,GAAG;YACV,wBAAwB;YACxB,yBAAyB;YACzB,oBAAoB;YACpB,YAAY;YACZ,iBAAiB;SACpB,CAAC;QAEF,OAAO;QACP,IAAI,KAAK,GAAG,mBAAmB,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;QAC/C,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,yBAAyB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QAClF,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,OAAO,CAAC,OAAO,CAAC,UAAU,YAAY;YAClC,MAAM,GAAG,MAAM,CAAC;YAChB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,qBAAqB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YACtF,KAAK,CAAC,gBAAgB,EAAE,CAAC;YACzB,KAAK,CAAC,iBAAiB,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;YAC9D,KAAK,CAAC,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YACxD,KAAK,CAAC,iBAAiB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;YACvD,KAAK,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;YAC3D,KAAK,CAAC,iBAAiB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAEjD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAClD,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAE7B,aAAa;YACb,IAAI,MAAM,GAAG,mBAAmB,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC1D,oBAAoB;YACpB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YAC5F,IAAI,MAAM,KAAK,CAAC,EAAE;gBACd,IAAI,MAAM,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;gBACrC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;aACrI;iBAAM;gBACH,aAAa;gBACb,oFAAoF;gBACpF,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,kBAAkB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;aAC3F;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,oBAAoB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QACzF,CAAC,CAAC,CAAC;QACH,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,0BAA0B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QACnF,SAAS,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;6DAEyD;IACzD,SAAS,mBAAmB;QAExB,sBAAsB;QACtB,IAAI,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAChE,IAAI,aAAa,EAAE;YACf,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE;gBAC9B,OAAO,EAAE,UAAU,IAAI;oBACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;oBACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,sBAAsB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC1F,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBACjG,CAAC;gBACD,OAAO,EAAE,UAAU,MAAM;oBACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;oBACnE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;wBAChC,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;wBACzC,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;4BACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;yBAClG;6BAAM;4BACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;yBACxD;qBACJ;yBAAM;wBACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;qBACxD;oBACD,IAAI,aAAa,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACnC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAC7K;oBACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,qBAAqB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBACzF,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;aACJ,CAAC,CAAC;SACN;QAED,+BAA+B;QAC/B,IAAI,sBAAsB,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAClF,IAAI,sBAAsB,EAAE;YACxB,WAAW,CAAC,MAAM,CAAC,sBAAsB,EAAE;gBACvC,OAAO,EAAE,UAAU,IAAI;oBACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;oBACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,+BAA+B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBACnG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBACjG,CAAC;gBACD,OAAO,EAAE,UAAU,MAAM;oBACrB,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;oBAC9B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBACzD,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;wBAChC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;wBAC7C,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;4BACnB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;yBAC7F;6BAAM;4BACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;yBACxD;qBACJ;yBAAM;wBACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;qBACxD;oBACD,IAAI,aAAa,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACnC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAC7K;oBACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,8BAA8B,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAClG,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;aACJ,CAAC,CAAC;SACN;QAED,yBAAyB;QACzB,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QACtE,IAAI,gBAAgB,EAAE;YAClB,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE;gBACjC,OAAO,EAAE,UAAU,IAAI;oBACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;oBACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,yBAAyB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC7F,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;oBAC7F,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,4BAA4B,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBAC9G,CAAC;gBACD,OAAO,EAAE,UAAU,MAAM;oBACrB,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;oBAC9B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBACzD,IAAI,aAAa,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACnC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAC7K;oBACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAwB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC5F,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;aACJ,CAAC,CAAC;SACN;QAED,yBAAyB;QACzB,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QACtE,IAAI,gBAAgB,EAAE;YAClB,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE;gBACjC,OAAO,EAAE,UAAU,IAAI;oBACnB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;oBACd,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,yBAAyB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC7F,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBACjG,CAAC;gBACD,OAAO,EAAE,UAAU,MAAM;oBACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;oBACnE,IAAI,aAAa,CAAC,QAAQ,CAAC,UAAU,EAAE;wBACnC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;qBAC7K;oBACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAwB,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC5F,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;aACJ,CAAC,CAAC;SACN;IACL,CAAC;IAED,IAAI,SAAS,EAAE,EAAE;QACb,IAAI,UAAU,GAAG,WAAW,CAAC;YACzB,aAAa,CAAC,UAAU,CAAC,CAAC;YAC1B,YAAY,EAAE,CAAC;QACnB,CAAC,EAAE,IAAI,CAAC,CAAC;KAEZ;SAAM;QACH,YAAY,EAAE,CAAC;KAClB;IACD,IAAI,aAAa,CAAC,QAAQ,CAAC,iBAAiB,EAAE;QAC1C,mBAAmB,EAAE,CAAC;KACzB;AACL,CAAC;AACD,OAAO;AACP,CAAC;IACG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QACjB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,OAAO;KACV;IACD,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;QACvB,OAAM;KACT;IACD,IAAI,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE;QAC7B,uBAAuB,EAAE,CAAC;KAC7B;IACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;QAC3B,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE;YACzB,iFAAiF;YACjF,qBAAqB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;SACxC;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,oFAAoF;YACpF,qBAAqB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,oFAAoF;YACpF,qBAAqB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,oFAAoF;YACpF,qBAAqB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,oFAAoF;YACpF,qBAAqB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE;YACxB,iFAAiF;YACjF,qBAAqB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE;YACxB,iFAAiF;YACjF,qBAAqB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE;YACxB,iFAAiF;YACjF,qBAAqB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;SACvC;KACJ;IACD,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE;QAC3B,qBAAqB,EAAE,CAAC;KAC3B;IACD,IAAI,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE;QAC5B,sBAAsB,EAAE,CAAC;KAC5B;IACD,IAAI,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC/B,yBAAyB,EAAE,CAAC;KAC/B;AACL,CAAC,CAAC,EAAE,CAAC"}
✄
/*************************************************************************************
 * Name: frida-ios-cipher
 * OS: iOS
 * Author: @shlu
 * Source: https://github.com/xpko/frida-ios-cipher
 *
 * Desc: Intercept all cryptography-related functions on iOS with Frida Api.
 *
 * Note that for CCryptor operations the data is mostly accumulated and printed on CCCryptorFinal calls.
 *
 * refs:https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h
 * refs:https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CC_MD5.3cc.html#//apple_ref/doc/man/3cc/CC_MD5
 * refs:https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CC_SHA.3cc.html#//apple_ref/doc/man/3cc/CC_SHA
 * refs:https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CCCryptor.3cc.html#//apple_ref/doc/man/3cc/CCCryptor
 * refs:https://opensource.apple.com/source/CommonCrypto/CommonCrypto-55010/CommonCrypto/CommonKeyDerivation.h.auto.html
 * refs:https://www.cnblogs.com/cocoajin/p/6150203.html
 * refs:https://frida.re/docs/javascript-api/
 * refs:https://codeshare.frida.re/@xperylab/cccrypt-dump/
 * refs:https://github.com/federicodotta/Brida
 * refs:https://github.com/sensepost/objection/blob/master/agent/src/ios/crypto.ts
 * refs:https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60118.200.6/lib/CommonCryptor.c.auto.html
 * refs:https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60026/CommonCrypto/CommonCryptor.h.auto.html
 * refs:https://www.jianshu.com/p/8896ed432dff
 * refs:https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60118.200.6/lib/
 * refs:https://blog.csdn.net/q187543/article/details/103920969
 * refs:https://github.com/ptoomey3/Keychain-Dumper/blob/master/main.m
 * refs:https://github.com/seemoo-lab/apple-continuity-tools/blob/565f2a95d8c3a958ffb430a5022a2df923eb5c1b/keychain_access/frida_scripts/hook_SecItemCopyMatching.js
 * refs:https://codeshare.frida.re/@Shapa7276/ios-keychain-update/
 * refs:https://github.com/FSecureLABS/needle/blob/master/needle/modules/storage/data/keychain_dump_frida.py
 **************************************************************************************/
//config
const CIPHER_CONFIG = {
    "enable": true,
    "highlighting": true,
    "crypto": {
        "enable": true,
        "maxDataLength": 240,
        "printStack": false,
        "aes": true,
        "des": true,
        "3des": true,
        "cast": true,
        "rc4": true,
        "rc2": true,
        "blowfish": true,
        "filter": []
    },
    "hash": {
        "enable": false,
        "maxInputDataLength": 240,
        "printStack": false,
        "md2": true,
        "md4": true,
        "md5": true,
        "sha1": true,
        "sha224": true,
        "sha256": true,
        "sha384": true,
        "sha512": true,
        "filter": []
    },
    "hmac": {
        "enable": false,
        "maxInputDataLength": 240,
        "printStack": false,
        "sha1": true,
        "md5": true,
        "sha224": true,
        "sha256": true,
        "sha384": true,
        "sha512": true,
        "filter": []
    },
    "pbkdf": {
        "enable": false,
        "printStack": false,
        "filter": []
    },
    "keychain": {
        "enable": false,
        "maxDataLength": 240,
        "printStack": false,
        "realtimeIntercept": true,
        "filter": []
    }
};
const STACKTRACE_MODE = Backtracer.FUZZY;
console.log();
//common
const COLORS = {
    "resetColor": CIPHER_CONFIG.highlighting ? "\x1b[0m" : "",
    "bold": CIPHER_CONFIG.highlighting ? "\x1b[1m" : "",
    "dim": CIPHER_CONFIG.highlighting ? "\x1b[2m" : "",
    "italic": CIPHER_CONFIG.highlighting ? "\x1b[3m" : "",
    "underline": CIPHER_CONFIG.highlighting ? "\x1b[4m" : "",
    "blink": CIPHER_CONFIG.highlighting ? "\x1b[5m" : "",
    "reverse": CIPHER_CONFIG.highlighting ? "\x1b[7m" : "",
    "hidden": CIPHER_CONFIG.highlighting ? "\x1b[8m" : "",
    "black": CIPHER_CONFIG.highlighting ? "\x1b[30m" : "",
    "red": CIPHER_CONFIG.highlighting ? "\x1b[31m" : "",
    "green": CIPHER_CONFIG.highlighting ? "\x1b[32m" : "",
    "yellow": CIPHER_CONFIG.highlighting ? "\x1b[33m" : "",
    "blue": CIPHER_CONFIG.highlighting ? "\x1b[34m" : "",
    "magenta": CIPHER_CONFIG.highlighting ? "\x1b[35m" : "",
    "cyan": CIPHER_CONFIG.highlighting ? "\x1b[36m" : "",
    "white": CIPHER_CONFIG.highlighting ? "\x1b[37m" : "",
    "bgBlack": CIPHER_CONFIG.highlighting ? "\x1b[40m" : "",
    "bgRed": CIPHER_CONFIG.highlighting ? "\x1b[41m" : "",
    "bgGreen": CIPHER_CONFIG.highlighting ? "\x1b[42m" : "",
    "bgYellow": CIPHER_CONFIG.highlighting ? "\x1b[43m" : "",
    "bgBlue": CIPHER_CONFIG.highlighting ? "\x1b[44m" : "",
    "bgMagenta": CIPHER_CONFIG.highlighting ? "\x1b[45m" : "",
    "bgCyan": CIPHER_CONFIG.highlighting ? "\x1b[46m" : "",
    "bgWhite": CIPHER_CONFIG.highlighting ? "\x1b[47m" : ""
};
const CC_MD2_DIGEST_LENGTH = 16;
const CC_MD4_DIGEST_LENGTH = 16;
const CC_MD5_DIGEST_LENGTH = 16;
const CC_SHA1_DIGEST_LENGTH = 20;
const CC_SHA224_DIGEST_LENGTH = 28;
const CC_SHA256_DIGEST_LENGTH = 32;
const CC_SHA384_DIGEST_LENGTH = 48;
const CC_SHA512_DIGEST_LENGTH = 64;
const CCOperation = {
    0: "kCCEncrypt",
    1: "kCCDecrypt",
    3: "kCCBoth" //Private Cryptor direction (op)
};
const CCAlgorithm = {
    0: "kCCAlgorithmAES",
    1: "kCCAlgorithmDES",
    2: "kCCAlgorithm3DES",
    3: "kCCAlgorithmCAST",
    4: "kCCAlgorithmRC4",
    5: "kCCAlgorithmRC2",
    6: "kCCAlgorithmBlowfish"
};
const CCOptions = {
    //options for block ciphers
    0: "kCCOptionCBCMode",
    1: "kCCOptionPKCS7Padding",
    2: "kCCOptionECBMode"
    //stream ciphers currently have no options
};
const CCMode = {
    1: "kCCModeECB",
    2: "kCCModeCBC",
    3: "kCCModeCFB",
    4: "kCCModeCTR",
    5: "kCCModeF8",
    6: "kCCModeLRW",
    7: "kCCModeOFB",
    8: "kCCModeXTS",
    9: "kCCModeRC4",
    10: "kCCModeCFB8",
    11: "kCCModeGCM",
    12: "kCCModeCCM"
};
const CCPadding = {
    0: "ccNoPadding",
    1: "ccPKCS7Padding",
    12: "ccCBCCTS3" //Private Paddings
};
const CCModeOptions = {
    0x0001: "kCCModeOptionCTR_LE",
    0x0002: "kCCModeOptionCTR_BE"
};
const CCKeySize = {
    16: "kCCKeySizeAES128|kCCKeySizeMaxCAST",
    24: "kCCKeySizeAES192|kCCKeySize3DES",
    32: "kCCKeySizeAES256",
    8: "kCCKeySizeDES|kCCKeySizeMinBlowfish",
    5: "kCCKeySizeMinCAST",
    1: "kCCKeySizeMinRC4|kCCKeySizeMinRC2",
    512: "kCCKeySizeMaxRC4",
    128: "kCCKeySizeMaxRC2",
    56: "kCCKeySizeMaxBlowfish"
};
const CCHmacAlgorithm = {
    0: "kCCHmacAlgSHA1",
    1: "kCCHmacAlgMD5",
    2: "kCCHmacAlgSHA256",
    3: "kCCHmacAlgSHA384",
    4: "kCCHmacAlgSHA512",
    5: "kCCHmacAlgSHA224",
};
const CCHmacAlgorithmLength = {
    0: CC_SHA1_DIGEST_LENGTH,
    1: CC_MD5_DIGEST_LENGTH,
    2: CC_SHA256_DIGEST_LENGTH,
    3: CC_SHA384_DIGEST_LENGTH,
    4: CC_SHA512_DIGEST_LENGTH,
    5: CC_SHA224_DIGEST_LENGTH,
};
const CCPseudoRandomAlgorithm = {
    1: "kCCPRFHmacAlgSHA1",
    2: "kCCPRFHmacAlgSHA224",
    3: "kCCPRFHmacAlgSHA256",
    4: "kCCPRFHmacAlgSHA384",
    5: "kCCPRFHmacAlgSHA512",
};
const CCPBKDFAlgorithm = {
    2: "kCCPBKDF2"
};
function toHexString(byteArray) {
    return Array.from(new Uint8Array(byteArray), function (value) {
        return ('0' + (value & 0xFF).toString(16)).slice(-2);
    }).join('');
}
// @ts-ignore
function print_arg(addr, len = 240, indent = null, dump = true) {
    var result = "";
    try {
        if (!addr || addr.toInt32() === 0 || addr.isNull())
            return "\n";
        if (dump) {
            result = "\n" + hexdump(addr, { length: len }) + "\n";
        }
        else {
            let arr = addr.readByteArray(len);
            result = toHexString(arr);
        }
    }
    catch (e) {
        if (e instanceof Error) {
            console.warn("print_arg error:", e.stack);
        }
        result = addr + "\n";
    }
    if (indent != null) {
        result = result.split('\n')
            .map(line => indent + line)
            .join('\n');
    }
    return result;
}
function pointerToInt(ptr) {
    try {
        if (!ptr || ptr.isNull() || ptr.toInt32() === 0) {
            return 0;
        }
        return parseInt(ptr.toString(), 16);
    }
    catch (e) {
        if (e instanceof Error) {
            console.warn("pointerToInt error:", e.stack);
        }
        return 0;
    }
}
function readCRefPointer(ptr) {
    if (!ptr || ptr.isNull() || ptr.toInt32() === 0) {
        return NULL;
    }
    return ptr.readPointer();
}
function optionsToStr(options) {
    let idx = options.toInt32();
    var opt = CCOptions[idx];
    if (opt == undefined) {
        opt = "Unknown";
    }
    return opt + " (" + idx + ")";
}
function filterLog(msg, filter) {
    if (filter == null || filter.length == 0) {
        console.log(msg);
    }
    else {
        var hasFilter = false;
        for (let value of filter) {
            if (value == null || value.length == 0)
                continue;
            hasFilter = true;
            if (msg.indexOf(value) >= 0) {
                console.log(msg);
                return;
            }
        }
        if (!hasFilter) {
            console.log(msg);
        }
    }
}
function isSpawned() {
    return Process.enumerateThreads().length === 1;
}
function fixHexDump(hex) {
    // @ts-ignore
    var ret = "";
    const lines = hex.split("\n");
    for (const line of lines) {
        const parts = line.split("");
        if (parts.length <= 58) {
            parts.splice(parts.length, 0, '\n');
        }
        else {
            parts.splice(parts.length, 0, '|\n');
            parts.splice(59, 0, '|');
        }
        parts.splice(0, 2);
        ret += parts.join("");
    }
    return ret;
}
function commonCryptoInterceptor() {
    function checkCryptoAlgorithmEnable(algorithm) {
        switch (algorithm) {
            case 0:
                return CIPHER_CONFIG.crypto.aes;
            case 1:
                return CIPHER_CONFIG.crypto.des;
            case 2:
                return CIPHER_CONFIG.crypto["3des"];
            case 3:
                return CIPHER_CONFIG.crypto.cast;
            case 4:
                return CIPHER_CONFIG.crypto.rc4;
            case 5:
                return CIPHER_CONFIG.crypto.rc2;
            case 6:
                return CIPHER_CONFIG.crypto.blowfish;
            default:
                return true;
        }
    }
    //CCCryptorStatus CCCrypt(
    // 	CCOperation op,			/* kCCEncrypt, etc. */
    // 	CCAlgorithm alg,		/* kCCAlgorithmAES128, etc. */
    // 	CCOptions options,		/* kCCOptionPKCS7Padding, etc. */
    // 	const void *key,
    // 	size_t keyLength,
    // 	const void *iv,			/* optional initialization vector */
    // 	const void *dataIn,		/* optional per op and alg */
    // 	size_t dataInLength,
    // 	void *dataOut,			/* data RETURNED here */
    // 	size_t dataOutAvailable,
    // 	size_t *dataOutMoved);
    let CCCrypt = Module.findExportByName("libSystem.B.dylib", "CCCrypt");
    if (CCCrypt == null) {
        console.warn("CCCrypt func is null");
        return;
    }
    Interceptor.attach(CCCrypt, {
        onEnter: function (args) {
            this.enable = checkCryptoAlgorithmEnable(args[1].toInt32());
            if (!this.enable)
                return;
            this.log = "";
            this.log = this.log.concat(COLORS.green, "[*] ENTER CCCrypt", COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] CCOperation: " + CCOperation[args[0].toInt32()], COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] CCAlgorithm: " + CCAlgorithm[args[1].toInt32()], COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] CCOptions: " + optionsToStr(args[2]), COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] KeySize: " + CCKeySize[args[4].toInt32()], COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] Key: " + print_arg(args[3], args[4].toInt32(), null, false), COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] IV: " + print_arg(args[5], 16, null, false), COLORS.resetColor, "\n");
            let dataInLength = pointerToInt(args[7]);
            let printLength = Math.min(dataInLength, CIPHER_CONFIG.crypto.maxDataLength);
            this.log = this.log.concat("[+] Data len: ", printLength, "/", dataInLength, "\n");
            this.log = this.log.concat("[+] Data : \n", "\n");
            this.log = this.log.concat(print_arg(args[6], printLength));
            this.dataOut = args[8];
            this.dataOutLength = args[10];
        },
        onLeave: function (retval) {
            if (!this.enable)
                return;
            let dataOutLen = pointerToInt(this.dataOutLength.readPointer());
            let printOutLen = Math.min(dataOutLen, CIPHER_CONFIG.crypto.maxDataLength);
            this.log = this.log.concat(COLORS.magenta, "[+] Data out len: ", printOutLen, "/", dataOutLen, "\n");
            this.log = this.log.concat("[+] Data out: \n", print_arg(this.dataOut, printOutLen), "\n", COLORS.resetColor);
            if (CIPHER_CONFIG.crypto.printStack) {
                this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            this.log = this.log.concat(COLORS.green, "[*] EXIT CCCrypt", COLORS.resetColor, "\n");
            filterLog(this.log, CIPHER_CONFIG.crypto.filter);
        }
    });
    let cRefCache = {};
    //CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv,CCCryptorRef *cryptorRef);
    let CCCryptorCreate = Module.findExportByName("libSystem.B.dylib", "CCCryptorCreate");
    if (CCCryptorCreate == null) {
        console.warn("CCCryptorCreate func is null ");
        return;
    }
    Interceptor.attach(CCCryptorCreate, {
        onEnter: function (args) {
            this.params = [];
            for (let i = 0; i < 7; i++) {
                this.params.push(args[i]);
            }
        },
        onLeave: function (retval) {
            let cRef = readCRefPointer(this.params[6]);
            let model = {
                enable: checkCryptoAlgorithmEnable(this.params[1]),
                cRef: cRef,
                dataMap: [],
                dataOutMap: [],
                totalLen: 0,
                totalOutLen: 0,
                originalLen: 0,
                originalOutLen: 0,
                log: "",
                finish: false,
                CCAlgorithm: "",
                CCOperation: "",
                CCMode: "",
                CCKeySize: "",
                CCModeOptions: "",
                CCPadding: "",
                Key: "",
                Iv: "null",
                Tweak: "",
                TweakLen: "",
                NumRounds: ""
            };
            cRefCache[String(model.cRef)] = model;
            if (!model.enable) {
                return;
            }
            let ccModeOpt = this.params[2].toInt32();
            model.log = model.log.concat(COLORS.green, "[*] ENTER CCCryptorCreate", COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCCryptorRef: ", String(cRef), COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCOperation : ", model.CCOperation = CCOperation[this.params[0].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCAlgorithm : " + CCAlgorithm[this.params[1].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCOptions   : ", model.CCModeOptions = CCModeOptions[ccModeOpt], "(" + ccModeOpt + ")", COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.cyan, "[+] Key len     : ", model.CCKeySize = CCKeySize[this.params[4].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.cyan, "[+] Key         : ", model.Key = print_arg(this.params[3], pointerToInt(this.params[4]), null, false), COLORS.resetColor, "\n");
            if (pointerToInt(this.params[5]) != 0) {
                model.log = model.log.concat(COLORS.cyan, "[+] Iv          : ", model.Iv = print_arg(this.params[5], 16, null, false), COLORS.resetColor, "\n");
            }
            else {
                model.log = model.log.concat(COLORS.red, "[!] Iv          : null\n", COLORS.resetColor);
            }
            filterLog(model.log, CIPHER_CONFIG.crypto.filter);
        }
    });
    //CCCryptorStatus CCCryptorCreateWithMode(
    //     CCOperation 	op,				/* kCCEncrypt, kCCEncrypt */
    //     CCMode			mode,
    //     CCAlgorithm		alg,
    //     CCPadding		padding,
    //     const void 		*iv,			/* optional initialization vector */
    //     const void 		*key,			/* raw key material */
    //     size_t 			keyLength,
    //     const void 		*tweak,			/* raw tweak material */  //for mode: XTS
    //     size_t 			tweakLength,
    //     int				numRounds,		/* 0 == default */
    //     CCModeOptions 	options,
    //     CCCryptorRef	*cryptorRef)	/* RETURNED */
    let CCCryptorCreateWithMode = Module.findExportByName("libSystem.B.dylib", "CCCryptorCreateWithMode");
    if (CCCryptorCreateWithMode == null) {
        console.warn("CCCryptorCreateWithMode func is null ");
        return;
    }
    Interceptor.attach(CCCryptorCreateWithMode, {
        onEnter: function (args) {
            let params = [];
            for (let i = 0; i < 12; i++) {
                params.push(args[i]);
            }
            this.params = params;
        },
        onLeave: function (retval) {
            // don't ask me why but the cryptorRef is in args[10] and not in args[11] - tested with Frida 16.7.13 on iOS 16.3.1
            let cRef = readCRefPointer(this.params[10]);
            console.log("CCCryptorCreateWithMode CCCryptorRef:" + cRef);
            let model = {
                enable: checkCryptoAlgorithmEnable(this.params[2]),
                cRef: cRef,
                dataMap: [],
                dataOutMap: [],
                totalLen: 0,
                totalOutLen: 0,
                originalLen: 0,
                originalOutLen: 0,
                log: "",
                finish: false,
                CCAlgorithm: "",
                CCOperation: "",
                CCMode: "",
                CCKeySize: "",
                CCModeOptions: "",
                CCPadding: "",
                Key: "",
                Iv: "null",
                Tweak: "",
                TweakLen: "",
                NumRounds: ""
            };
            cRefCache[String(model.cRef)] = model;
            if (!model.enable) {
                return;
            }
            model.log = model.log.concat(COLORS.green, "[*] ENTER CCCryptorCreateWithMode", COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCCryptorRef : ", String(model.cRef), COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCOperation  : ", model.CCOperation = CCOperation[this.params[0].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCMode       : ", model.CCMode = CCMode[this.params[1].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCAlgorithm  : ", model.CCAlgorithm = CCAlgorithm[this.params[2].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCPadding    : ", model.CCPadding = CCPadding[this.params[3].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.yellow, "[+] CCModeOptions: ", model.CCModeOptions = optionsToStr(this.params[10]), COLORS.resetColor, "\n");
            let tweakLen = this.params[8].toInt32();
            if (tweakLen > 0 && pointerToInt(this.params[7]) != 0) {
                model.log = model.log.concat(COLORS.cyan, "[+] tweak len    : ", model.TweakLen = tweakLen, COLORS.resetColor, "\n");
                model.log = model.log.concat(COLORS.cyan, "[+] tweak        : ", model.Tweak = print_arg(this.params[7], pointerToInt(this.params[8]), null, false), COLORS.resetColor, "\n");
            }
            model.log = model.log.concat(COLORS.cyan, "[+] numRounds    : ", model.NumRounds = this.params[9].toInt32(), COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.cyan, "[+] Key len      : ", model.CCKeySize = CCKeySize[this.params[6].toInt32()], COLORS.resetColor, "\n");
            model.log = model.log.concat(COLORS.cyan, "[+] Key          : ", model.Key = print_arg(this.params[5], pointerToInt(this.params[6]), null, false), COLORS.resetColor, "\n");
            if (pointerToInt(this.params[4]) != 0) {
                model.log = model.log.concat(COLORS.cyan, "[+] Iv           : ", model.Iv = print_arg(this.params[4], 16, null, false), COLORS.resetColor, "\n");
            }
            else {
                model.log = model.log.concat(COLORS.red, "[!] Iv           : null\n", COLORS.resetColor);
            }
        }
    });
    //    CCCryptorStatus CCCryptorCreateFromData(
    //        CCOperation op,             /* kCCEncrypt, etc. */
    //        CCAlgorithm alg,            /* kCCAlgorithmDES, etc. */
    //        CCOptions options,          /* kCCOptionPKCS7Padding, etc. */
    //        const void *key,            /* raw key material */
    //        size_t keyLength,
    //        const void *iv,             /* optional initialization vector */
    //        const void *data,           /* caller-supplied memory */
    //        size_t dataLength,          /* length of data in bytes */
    //        CCCryptorRef *cryptorRef,   /* RETURNED */
    //        size_t *dataUsed)           /* optional, RETURNED */        
    let CCCryptorCreateFromData = Module.findExportByName("libSystem.B.dylib", "CCCryptorCreateFromData");
    if (CCCryptorCreateFromData == null) {
        console.warn("CCCryptorCreateFromData func is null ");
        return;
    }
    Interceptor.attach(CCCryptorCreateFromData, {
        onEnter: function (args) {
            console.warn("CCCryptorCreateFromData is not yet implemented");
            // TODO
        },
        onLeave: function (retval) {
            // TODO
        }
    });
    //CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved);
    let CCCryptorUpdate = Module.findExportByName("libSystem.B.dylib", "CCCryptorUpdate");
    if (CCCryptorUpdate == null) {
        console.warn("CCCryptorUpdate func is null");
        return;
    }
    Interceptor.attach(CCCryptorUpdate, {
        onEnter: function (args) {
            let params = [];
            for (let i = 0; i < 6; i++) {
                params.push(args[i]);
            }
            this.params = params;
        },
        onLeave: function (retval) {
            let cRef = this.params[0];
            let model = cRefCache[String(cRef)];
            if (model == null) {
                model = {
                    enable: CIPHER_CONFIG.crypto.enable,
                    cRef: cRef,
                    dataMap: [],
                    dataOutMap: [],
                    totalLen: 0,
                    totalOutLen: 0,
                    originalLen: 0,
                    originalOutLen: 0,
                    log: "",
                    finish: false,
                    CCAlgorithm: "",
                    CCOperation: "",
                    CCMode: "",
                    CCKeySize: "",
                    CCModeOptions: "",
                    CCPadding: "",
                    Key: "",
                    Iv: "",
                    Tweak: "",
                    TweakLen: "",
                    NumRounds: ""
                };
                model.log = model.log.concat(COLORS.green, "[*] ENTER CCCryptorUpdate (note: Cannot be associated with an existing CCCryptorRef " + cRef + ", so the data encryption parameters " +
                    "are unknown, However, a list of encryption instances that are currently still being processed can be provided here.)", COLORS.resetColor, "\n");
                model.log = model.log.concat(COLORS.blue, "[=] The list is as follows:", COLORS.resetColor, "\n");
                for (let cRefCacheKey in cRefCache) {
                    let value = cRefCache[cRefCacheKey];
                    if (value != null && !value.finish) {
                        model.log = model.log.concat(COLORS.cyan, "[+] : CCCryptorRef : ", String(value.cRef), "\n", COLORS.resetColor);
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCAlgorithm  : ", value.CCAlgorithm, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCOperation  : ", value.CCOperation, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCMode       : ", value.CCMode, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCKeySize    : ", value.CCKeySize, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCModeOptions: ", value.CCModeOptions, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : CCPadding    : ", value.CCPadding, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : Key          : ", value.Key, COLORS.resetColor, "\n");
                        model.log = model.log.concat(COLORS.yellow, "[+] : Iv           : ", value.Iv, COLORS.resetColor, "\n");
                        if (parseInt(value.TweakLen) > 0) {
                            model.log = model.log.concat(COLORS.yellow, "[+] : TweakLen     : ", value.TweakLen, COLORS.resetColor, "\n");
                            model.log = model.log.concat(COLORS.yellow, "[+] : Tweak        : ", value.Tweak, COLORS.resetColor, "\n");
                        }
                        model.log = model.log.concat(COLORS.yellow, "[+] : NumRounds    : ", value.NumRounds, COLORS.resetColor, "\n");
                    }
                }
                model.log = model.log.concat(COLORS.blue, "[=] End of list", COLORS.resetColor, "\n");
                cRefCache[String(this.params[0])] = model;
            }
            if (!model.enable)
                return;
            model.originalLen += this.params[2].toInt32();
            let remainingSpace = CIPHER_CONFIG.crypto.maxDataLength - model.totalLen;
            let dataLen = pointerToInt(this.params[2]);
            model.log = model.log.concat(COLORS.green, "[*] CCCryptorUpdate " + model.cRef + " with " + dataLen + " bytes input", COLORS.resetColor, "\n");
            if (dataLen > 0 && remainingSpace > 0) {
                let copyLength = Math.min(dataLen, remainingSpace);
                let tmpData = Memory.alloc(copyLength);
                Memory.copy(tmpData, this.params[1], copyLength);
                model.dataMap.push({ data: tmpData, len: copyLength });
                model.totalLen += copyLength;
            }
            let outRemainingSpace = CIPHER_CONFIG.crypto.maxDataLength - model.totalOutLen;
            let outLen = pointerToInt(this.params[5].readPointer());
            model.originalOutLen += outLen;
            if (outLen > 0 && outRemainingSpace > 0) {
                let copyLength = Math.min(outLen, outRemainingSpace);
                let tmpDataOut = Memory.alloc(copyLength);
                Memory.copy(tmpDataOut, this.params[3], copyLength);
                model.dataOutMap.push({ data: tmpDataOut, len: copyLength });
                model.totalOutLen += copyLength;
            }
        }
    });
    //CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved);
    let CCCryptorFinal = Module.findExportByName("libSystem.B.dylib", "CCCryptorFinal");
    if (CCCryptorFinal == null) {
        console.warn("CCCryptorFinal func is null");
        return;
    }
    Interceptor.attach(CCCryptorFinal, {
        onEnter: function (args) {
            this.params = [];
            for (let i = 0; i < 4; i++) {
                this.params.push(args[i]);
            }
        },
        onLeave: function (retval) {
            let cRef = this.params[0];
            let model = cRefCache[String(cRef)];
            if (model == null) {
                console.warn("CCCryptorFinal model not found for cryptorRef=" + cRef);
                return;
            }
            if (!model.enable)
                return;
            model.log = model.log.concat(COLORS.green, "[*] ENTER CCCryptorFinal", COLORS.resetColor, "\n");
            model.log = model.log.concat("[+] CCCryptorRef: ", String(model.cRef), "\n");
            if (model.totalOutLen < CIPHER_CONFIG.crypto.maxDataLength) {
                let outRemainingSpace = CIPHER_CONFIG.crypto.maxDataLength - model.totalOutLen;
                let outLen = pointerToInt(this.params[3].readPointer());
                model.originalOutLen += outLen;
                if (outLen > 0 && outRemainingSpace > 0) {
                    let copyLength = Math.min(outLen, outRemainingSpace);
                    let tmpDataOut = Memory.alloc(copyLength);
                    Memory.copy(tmpDataOut, this.params[1], copyLength);
                    model.dataOutMap.push({ data: tmpDataOut, len: copyLength });
                    model.totalOutLen += copyLength;
                }
            }
            model.log = model.log.concat("[+] Data len: " + model.totalLen + "/" + model.originalLen + "\n");
            if (model.totalLen > 0) {
                let totalData = Memory.alloc(model.totalLen);
                var offset = 0;
                model.dataMap.forEach(function (value) {
                    Memory.copy(totalData.add(offset), value.data, value.len);
                    offset += value.len;
                });
                model.log = model.log.concat("[+] Data : \n", print_arg(totalData, model.totalLen), "\n");
            }
            if (model.totalOutLen > 0) {
                let totalOutData = Memory.alloc(model.totalOutLen);
                var offsetOut = 0;
                model.dataOutMap.forEach(function (value) {
                    Memory.copy(totalOutData.add(offsetOut), value.data, value.len);
                    offsetOut += value.len;
                });
                model.log = model.log.concat(COLORS.magenta, "[+] Data out len: " + model.totalOutLen + "/" + model.originalOutLen + "\n");
                model.log = model.log.concat("[+] Data out: \n", print_arg(totalOutData, model.totalOutLen), "\n", COLORS.resetColor);
            }
            if (CIPHER_CONFIG.crypto.printStack) {
                model.log = model.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            model.log = model.log.concat(COLORS.green, "[*] EXIT CCCryptorFinal ", COLORS.resetColor, "\n");
            model.finish = true;
            filterLog(model.log, CIPHER_CONFIG.crypto.filter);
        }
    });
}
function commonHashInterceptor(name, length) {
    let hash = Module.findExportByName("libSystem.B.dylib", name);
    if (hash == null) {
        console.warn(name + " func is null");
        return;
    }
    Interceptor.attach(hash, {
        onEnter: function (args) {
            this.log = "";
            this.log = this.log.concat(COLORS.green, "[*] ENTER ", name, COLORS.resetColor, "\n");
            let dataLen = args[1].toInt32();
            let printLen = Math.min(dataLen, CIPHER_CONFIG.hash.maxInputDataLength);
            this.log = this.log.concat("[+] Data len: ", printLen, "/", dataLen, "\n");
            this.log = this.log.concat("[+] Data: \n", print_arg(args[0], printLen), "\n");
        },
        onLeave: function (reval) {
            this.log = this.log.concat(COLORS.magenta, "[+] Data out len: " + length, COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.magenta, "[+] Data out:\n", print_arg(reval, length), COLORS.resetColor, "\n");
            if (CIPHER_CONFIG.hash.printStack) {
                this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            this.log = this.log.concat(COLORS.green, "[*] EXIT ", name, COLORS.resetColor, "\n");
            filterLog(this.log, CIPHER_CONFIG.hash.filter);
        }
    });
    (function () {
        let ctxCache = {};
        //CC_SHA1_Init(CC_SHA1_CTX *c);
        let init = Module.findExportByName("libSystem.B.dylib", name + "_Init");
        if (init == null) {
            console.warn(name + "_Init func is null");
            return;
        }
        Interceptor.attach(init, {
            onEnter: function (args) {
                let model = { ctx: args[0], dataMap: [], totalLen: 0, originalLen: 0, log: "" };
                ctxCache[pointerToInt(args[0])] = model;
                model.log = model.log.concat(COLORS.green, "[*] ENTER " + name + "_Init\n", COLORS.resetColor);
            }
        });
        //CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len);
        let update = Module.findExportByName("libSystem.B.dylib", name + "_Update");
        if (update == null) {
            console.warn(name + "_Update func is null");
            return;
        }
        Interceptor.attach(update, {
            onEnter: function (args) {
                let model = ctxCache[pointerToInt(args[0])];
                if (model == null) {
                    console.warn("model is null");
                    return;
                }
                let len = pointerToInt(args[2]);
                let remainingSpace = CIPHER_CONFIG.hash.maxInputDataLength - model.totalLen;
                if (len > 0 && remainingSpace > 0) {
                    model.originalLen += len;
                    let copyLen = Math.min(len, remainingSpace);
                    let tmpData = Memory.alloc(copyLen);
                    Memory.copy(tmpData, args[1], copyLen);
                    model.dataMap.push({ data: tmpData, len: copyLen });
                    model.totalLen += copyLen;
                }
            }
        });
        //CC_SHA1_Final(unsigned char *md, CC_SHA1_CTX *c);
        let final = Module.findExportByName("libSystem.B.dylib", name + "_Final");
        if (final == null) {
            console.warn(name + "_Final func is null");
            return;
        }
        Interceptor.attach(final, {
            onEnter: function (args) {
                this.mdSha = args[0];
                this.ctxSha = args[1];
            },
            onLeave: function (retval) {
                let model = ctxCache[pointerToInt(this.ctxSha)];
                if (model == null) {
                    console.warn(name + "_Final model is null");
                    return;
                }
                if (model.totalLen <= 0) {
                    console.warn("totalLen :", model.totalLen);
                    return;
                }
                let totalData = Memory.alloc(model.totalLen);
                var offset = 0;
                model.dataMap.forEach(function (value) {
                    Memory.copy(totalData.add(offset), value.data, value.len);
                    offset += value.len;
                });
                model.log = model.log.concat("[+] Data len: " + model.totalLen + "/" + model.originalLen + "\n");
                model.log = model.log.concat("[+] Data :\n");
                model.log = model.log.concat(print_arg(totalData, model.totalLen), "\n");
                if (pointerToInt(this.mdSha) !== 0) {
                    model.log = model.log.concat(COLORS.magenta, "[+] Data out len: " + length + "\n");
                    model.log = model.log.concat("[+] Data out:\n");
                    model.log = model.log.concat(print_arg(ptr(this.mdSha), length), "\n", COLORS.resetColor);
                }
                else {
                    model.log = model.log.concat(COLORS.red, "[!]: Data out: null\n", COLORS.resetColor);
                }
                if (CIPHER_CONFIG.hash.printStack) {
                    model.log = model.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                }
                model.log = model.log.concat(COLORS.green, "[*] EXIT " + name + "_Final" + "\n", COLORS.resetColor);
                filterLog(model.log, CIPHER_CONFIG.hash.filter);
            }
        });
    })();
}
function commonHMACInterceptor() {
    function checkHMACAlgorithmEnable(algorithm) {
        switch (algorithm) {
            case 0:
                return CIPHER_CONFIG.hmac.sha1;
            case 1:
                return CIPHER_CONFIG.hmac.md5;
            case 2:
                return CIPHER_CONFIG.hmac.sha256;
            case 3:
                return CIPHER_CONFIG.hmac.sha384;
            case 4:
                return CIPHER_CONFIG.hmac.sha512;
            case 5:
                return CIPHER_CONFIG.hmac.sha224;
            default:
                return true;
        }
    }
    let name = "CCHmac";
    //void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength,const void *data, size_t dataLength, void *macOut);
    let hmac = Module.findExportByName("libSystem.B.dylib", name);
    if (hmac == null) {
        console.warn(name + " func is null");
        return;
    }
    Interceptor.attach(hmac, {
        onEnter: function (args) {
            this.enable = checkHMACAlgorithmEnable(args[0].toInt32());
            if (!this.enable)
                return;
            this.mdLen = CCHmacAlgorithmLength[args[0].toInt32()];
            this.log = "";
            this.log = this.log.concat(COLORS.green, "[*] ENTER ", name, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] Algorithm: ", CCHmacAlgorithm[args[0].toInt32()], "\n", COLORS.resetColor);
            this.log = this.log.concat(COLORS.cyan, "[+] Key len: ", args[2].toInt32(), "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] Key : \n", print_arg(args[1], args[2].toInt32()), "\n", COLORS.resetColor);
            let dataLen = args[4].toInt32();
            let printLen = Math.min(dataLen, CIPHER_CONFIG.hmac.maxInputDataLength);
            this.log = this.log.concat("[+] Data len: ", printLen, "/", dataLen, "\n");
            this.log = this.log.concat("[+] Data: \n", print_arg(args[3], printLen), "\n");
            this.macOut = args[5];
        },
        onLeave: function (reval) {
            if (!this.enable)
                return;
            this.log = this.log.concat(COLORS.magenta, "[+] Data out len: " + this.mdLen, COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.magenta, "[+] Data out:\n", print_arg(this.macOut, this.mdLen), COLORS.resetColor, "\n");
            if (CIPHER_CONFIG.hmac.printStack) {
                this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            this.log = this.log.concat(COLORS.green, "[*] EXIT ", name, COLORS.resetColor, "\n");
            filterLog(this.log, CIPHER_CONFIG.hmac.filter);
        }
    });
    (function () {
        let ctxCache = {};
        //void
        //      CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm,
        //          const void *key, size_t keyLength);
        let init = Module.findExportByName("libSystem.B.dylib", name + "Init");
        if (init == null) {
            console.warn(name + "Init func is null");
            return;
        }
        Interceptor.attach(init, {
            onEnter: function (args) {
                let model = { ctx: args[0], dataMap: [], totalLen: 0, originalLen: 0, log: "", mdLen: CCHmacAlgorithmLength[args[1].toInt32()], enable: checkHMACAlgorithmEnable(args[1].toInt32()) };
                ctxCache[pointerToInt(args[0])] = model;
                if (!model.enable)
                    return;
                model.log = model.log.concat(COLORS.green, "[*] ENTER " + name + "Init\n", COLORS.resetColor);
                model.log = model.log.concat(COLORS.yellow, "[+] Algorithm: " + CCHmacAlgorithm[args[1].toInt32()] + "\n", COLORS.resetColor);
                model.log = model.log.concat(COLORS.cyan, "[+] Key len: " + args[3].toInt32() + COLORS.resetColor + "\n");
                model.log = model.log.concat(COLORS.cyan, "[+] Key: \n" + print_arg(args[2], pointerToInt(args[3])) + "\n", COLORS.resetColor);
            }
        });
        //void
        //      CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength);
        let update = Module.findExportByName("libSystem.B.dylib", name + "Update");
        if (update == null) {
            console.warn(name + "Update func is null");
            return;
        }
        Interceptor.attach(update, {
            onEnter: function (args) {
                let model = ctxCache[pointerToInt(args[0])];
                if (model == null) {
                    console.warn(name + "Update model is null");
                    return;
                }
                if (!model.enable)
                    return;
                let len = pointerToInt(args[2]);
                let remainingSpace = CIPHER_CONFIG.hmac.maxInputDataLength - model.totalLen;
                if (len > 0 && remainingSpace > 0) {
                    model.originalLen += len;
                    let copyLen = Math.min(len, remainingSpace);
                    let tmpData = Memory.alloc(copyLen);
                    Memory.copy(tmpData, args[1], copyLen);
                    model.dataMap.push({ data: tmpData, len: copyLen });
                    model.totalLen += copyLen;
                }
            }
        });
        //void
        //      CCHmacFinal(CCHmacContext *ctx, void *macOut);
        let final = Module.findExportByName("libSystem.B.dylib", name + "Final");
        if (final == null) {
            console.warn(name + "Final func is null");
            return;
        }
        Interceptor.attach(final, {
            onEnter: function (args) {
                this.mdOut = args[1];
                this.ctx = args[0];
            },
            onLeave: function (retval) {
                let model = ctxCache[pointerToInt(this.ctx)];
                if (model == null) {
                    console.warn(name + "Final model is null");
                    return;
                }
                if (!model.enable)
                    return;
                if (model.totalLen <= 0) {
                    console.warn("totalLen :", model.totalLen);
                    return;
                }
                let totalData = Memory.alloc(model.totalLen);
                var offset = 0;
                model.dataMap.forEach(function (value) {
                    Memory.copy(totalData.add(offset), value.data, value.len);
                    offset += value.len;
                });
                model.log = model.log.concat("[+] Data len: " + model.totalLen + "/" + model.originalLen + "\n");
                model.log = model.log.concat("[+] Data :\n");
                model.log = model.log.concat(print_arg(totalData, model.totalLen), "\n");
                model.log = model.log.concat(COLORS.magenta, "[+] Data out len: " + model.mdLen + "\n");
                model.log = model.log.concat("[+] Data out:\n");
                model.log = model.log.concat(print_arg(ptr(this.mdOut), model.mdLen), "\n", COLORS.resetColor);
                if (CIPHER_CONFIG.hmac.printStack) {
                    model.log = model.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                }
                model.log = model.log.concat(COLORS.green, "[*] EXIT " + name + "Final" + "\n", COLORS.resetColor);
                filterLog(model.log, CIPHER_CONFIG.hmac.filter);
            }
        });
    })();
}
//pbkdf
function commonPBKDFInterceptor() {
    //int
    // CCKeyDerivationPBKDF( CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen,
    //                       const uint8_t *salt, size_t saltLen,
    //                       CCPseudoRandomAlgorithm prf, uint rounds,
    //                       uint8_t *derivedKey, size_t derivedKeyLen)
    let CCKeyDerivationPBKDF = Module.findExportByName("libSystem.B.dylib", "CCKeyDerivationPBKDF");
    if (CCKeyDerivationPBKDF == null) {
        console.warn("CCKeyDerivationPBKDF func is null");
        return;
    }
    Interceptor.attach(CCKeyDerivationPBKDF, {
        onEnter: function (args) {
            this.params = [];
            for (let i = 0; i < 9; i++) {
                this.params.push(args[i]);
            }
        },
        onLeave: function (reval) {
            var log = "";
            log = log.concat(COLORS.green, "[*] ENTER CCKeyDerivationPBKDF", COLORS.resetColor, "\n");
            log = log.concat(COLORS.yellow, "[+] Algorithm: ", CCPBKDFAlgorithm[this.params[0].toInt32()], "\n", COLORS.resetColor);
            log = log.concat(COLORS.yellow, "[+] PseudoRandomAlgorithm: ", CCPseudoRandomAlgorithm[this.params[5].toInt32()], "\n", COLORS.resetColor);
            log = log.concat(COLORS.cyan, "[+] Rounds: ", String(pointerToInt(this.params[6])), "\n", COLORS.resetColor);
            log = log.concat(COLORS.cyan, "[+] Password len: ", this.params[2].toInt32(), "\n");
            log = log.concat(COLORS.cyan, "[+] Password : \n", print_arg(this.params[1], this.params[2].toInt32()), "\n", COLORS.resetColor);
            log = log.concat(COLORS.cyan, "[+] Salt len: ", this.params[4].toInt32(), "\n");
            log = log.concat(COLORS.cyan, "[+] Salt : \n", print_arg(this.params[3], this.params[4].toInt32()), "\n", COLORS.resetColor);
            log = log.concat(COLORS.cyan, "[+] DerivedKey len: ", this.params[8].toInt32(), "\n");
            log = log.concat(COLORS.cyan, "[+] DerivedKey : \n", print_arg(this.params[7], this.params[8].toInt32()), "\n", COLORS.resetColor);
            if (CIPHER_CONFIG.pbkdf.printStack) {
                log = log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            log = log.concat(COLORS.green, "[*] EXIT CCKeyDerivationPBKDF", COLORS.resetColor, "\n");
            filterLog(log, CIPHER_CONFIG.pbkdf.filter);
        }
    });
    //uint
    // CCCalibratePBKDF(CCPBKDFAlgorithm algorithm, size_t passwordLen, size_t saltLen,
    //                  CCPseudoRandomAlgorithm prf, size_t derivedKeyLen, uint32_t msec)
    let CCCalibratePBKDF = Module.findExportByName("libSystem.B.dylib", "CCCalibratePBKDF");
    if (CCCalibratePBKDF == null) {
        console.warn("CCCalibratePBKDF func is null");
        return;
    }
    Interceptor.attach(CCCalibratePBKDF, {
        onEnter: function (args) {
            this.log = "";
            this.log = this.log.concat(COLORS.green, "[*] ENTER CCCalibratePBKDF", COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.yellow, "[+] Algorithm: ", CCPBKDFAlgorithm[args[0].toInt32()], "\n", COLORS.resetColor);
            this.log = this.log.concat(COLORS.yellow, "[+] PseudoRandomAlgorithm: ", CCPseudoRandomAlgorithm[args[3].toInt32()], "\n", COLORS.resetColor);
            this.log = this.log.concat(COLORS.cyan, "[+] Password len: ", args[1].toInt32(), COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] Salt len: ", args[2].toInt32(), COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] DerivedKey len: ", args[4].toInt32(), COLORS.resetColor, "\n");
            this.log = this.log.concat(COLORS.cyan, "[+] Msec : ", pointerToInt(args[5]), COLORS.resetColor, "\n");
        },
        onLeave: function (reval) {
            this.log = this.log.concat(COLORS.cyan, "[+] IterNum : \n", pointerToInt(reval), COLORS.resetColor, "\n");
            if (CIPHER_CONFIG.pbkdf.printStack) {
                this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
            }
            this.log = this.log.concat(COLORS.green, "[*] EXIT CCCalibratePBKDF", COLORS.resetColor, "\n");
            filterLog(this.log, CIPHER_CONFIG.pbkdf.filter);
        }
    });
}
//keychain
function commonKeychainInterceptor() {
    var ISA_MASK = ptr('0x0000000ffffffff8');
    var ISA_MAGIC_MASK = ptr('0x000003f000000001');
    var ISA_MAGIC_VALUE = ptr('0x000001a000000001');
    // @ts-ignore
    function isObjC(p) {
        var klass = getObjCClassPtr(p);
        return !klass.isNull();
    }
    // @ts-ignore
    function getObjCClassPtr(p) {
        /*
         * Loosely based on:
         * https://blog.timac.org/2016/1124-testing-if-an-arbitrary-pointer-is-a-valid-objective-c-object/
         */
        if (!isReadable(p)) {
            return NULL;
        }
        var isa = p.readPointer();
        var classP = isa;
        if (classP.and(ISA_MAGIC_MASK).equals(ISA_MAGIC_VALUE)) {
            classP = isa.and(ISA_MASK);
        }
        if (isReadable(classP)) {
            return classP;
        }
        return NULL;
    }
    // @ts-ignore
    function isReadable(p) {
        try {
            p.readU8();
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /*******************************************************
     * 0. 通用工具函数
     *******************************************************/
    /**
     * 从导出符号中获取 C 函数或者常量指针
     * type = "f" => function, type = "d" => data
     * ret/args 仅函数类型需要，常量不需要
     */
    //@ts-ignore
    function getExportFunction(type, name, ret, args) {
        var nptr = Module.findExportByName(null, name);
        if (nptr === null) {
            console.warn("[-] Cannot find export:", name);
            return null;
        }
        if (type === "f") {
            // @ts-ignore
            var funclet = new NativeFunction(nptr, ret, args);
            if (!funclet) {
                console.warn("[-] parse error for function:", name);
                return null;
            }
            return funclet;
        }
        else if (type === "d") {
            var datalet = nptr.readPointer();
            if (!datalet) {
                console.warn("[-] parse error for data:", name);
                return null;
            }
            return datalet;
        }
    }
    /**
     * 依据 NSData 首字节 / 是否全可见 ASCII，做简单类型检测
     * - JSON: 首字节是 '{' or '['
     * - ASCII: 每字节都在 0x20~0x7E
     * - 否则 => Binary
     */
    // @ts-ignore
    function detectDataType(nsDataObj) {
        if (!nsDataObj || nsDataObj.isNull())
            return "Empty";
        var length = nsDataObj.length();
        if (length === 0)
            return "Empty";
        var ptrBytes = nsDataObj.bytes();
        var rawBytes = ptrBytes.readByteArray(length);
        var u8Arr = new Uint8Array(rawBytes);
        // 1) JSON
        if (u8Arr[0] === 0x7B || u8Arr[0] === 0x5B) {
            // '{'=0x7B, '['=0x5B
            return "Possible JSON";
        }
        // 2) 检查是否全为可见 ASCII
        var allAscii = true;
        for (var i = 0; i < u8Arr.length; i++) {
            if (u8Arr[i] < 0x20 || u8Arr[i] > 0x7E) {
                allAscii = false;
                break;
            }
        }
        if (allAscii)
            return "Possible ASCII";
        // 3) 否则就是二进制
        return "Binary";
    }
    /**
     * 将 NSData 以 hexdump(16字节一行)格式打印
     */
    /*******************************************************
     * 1. 打印 Keychain Item (NSDictionary / NSData / NSArray)
     *******************************************************/
    /**
     * 当我们在“静态枚举”或“动态结果”里拿到的对象可能是：
     * - NSArray(里面每个元素是 NSDictionary)
     * - NSDictionary(里面可能有 v_Data / kSecValueData 字段)
     * - NSData(直接就是 __NSCFData)
     * - 甚至其他类型
     *
     * 我们做一个统一的入口来处理。
     */
    //@ts-ignore
    function dumpKeychainObject(objHandle, indent = "") {
        var log = "";
        if (!objHandle || objHandle.toInt32() === 0 || objHandle.isNull() || !isObjC(objHandle))
            return log;
        var obj = new ObjC.Object(objHandle);
        // 1) NSArray
        if (obj.isKindOfClass_(ObjC.classes.NSArray)) {
            log = log.concat(indent, COLORS.green, "[*] ENTER dump NSArray", COLORS.resetColor, "\n");
            for (var i = 0; i < obj.count(); i++) {
                var subItem = obj.objectAtIndex_(i);
                // 可能是 dict / data / etc.
                log = log.concat(indent, "[+] object: \n", dumpKeychainObject(subItem.handle, "    " + indent), "\n");
            }
            log = log.concat(indent, COLORS.green, "[*] EXIT dump NSArray", COLORS.resetColor, "\n");
        }
        // 2) NSDictionary
        else if (obj.isKindOfClass_(ObjC.classes.NSDictionary)) {
            log = log.concat(indent, COLORS.green, "[*] ENTER dump NSDictionary", COLORS.resetColor, "\n");
            // 我们遍历 key => value
            var allKeys = obj.allKeys();
            for (var i = 0; i < allKeys.count(); i++) {
                var key = allKeys.objectAtIndex_(i);
                var val = obj.objectForKey_(key);
                var kStr = key.toString();
                // 如果是 data 字段，就 hexdump
                // 常见的是 v_Data, kSecValueData, v_DataEncrypted
                if (val.$className === "NSConcreteData") {
                    // var type = detectDataType(val);
                    // console.log("    " + kStr + " [Detected: " + type + "] => hexdump:");
                    // dumpNSData(val);
                    log = log.concat(indent, "[+] ", kStr, ": \n", dumpKeychainObject(val.handle, "    " + indent), "\n");
                }
                else {
                    // 如果是其他对象(NSArray/NSDictionary/NSString/NSNumber/...)
                    // 递归 or 直接 toString
                    if (val.isKindOfClass_(ObjC.classes.NSArray) ||
                        val.isKindOfClass_(ObjC.classes.NSDictionary) ||
                        val.isKindOfClass_(ObjC.classes.NSData)) {
                        // 递归再打印
                        if (kStr.indexOf("v_Data") == 0) {
                            log = log.concat(indent, COLORS.yellow, "[+] ", kStr, ": \n", dumpKeychainObject(val.handle, "    " + indent), COLORS.resetColor, "\n");
                        }
                        else {
                            log = log.concat(indent, "[+] ", kStr, ": \n", dumpKeychainObject(val.handle, "    " + indent), "\n");
                        }
                    }
                    else {
                        if (kStr.indexOf("acct") == 0 || kStr.indexOf("svce") == 0 || kStr.indexOf("agrp") == 0) {
                            log = log.concat(indent, COLORS.cyan, "[+] ", `${kStr}: ${val}`, COLORS.resetColor, "\n");
                        }
                        else {
                            // @ts-ignore
                            log = log.concat(indent, "[+] ", `${kStr}: ${val}`, "\n");
                        }
                    }
                }
            }
            log = log.concat(indent, COLORS.green, "[*] EXIT dump NSDictionary", COLORS.resetColor, "\n");
        }
        // 3) NSData
        else if (obj.isKindOfClass_(ObjC.classes.NSData)) {
            if (!obj || obj.isNull() || obj.length() == 0) {
                log = log.concat(indent, "[-] NSData.Len: 0", "\n");
                log = log.concat(indent, "[-] NSData: null", "\n");
            }
            else {
                var length = obj.length();
                var ptrBytes = obj.bytes();
                let minLen = Math.min(CIPHER_CONFIG.keychain.maxDataLength, length);
                log = log.concat(indent, "[+] NSData.Len: ", String(minLen), "/", length, "", "\n");
                // @ts-ignore
                log = log.concat(indent, "[+] NSData: \n", print_arg(ptrBytes, minLen, indent), "\n");
            }
        }
        // 4) 其他类型
        else {
            log = log.concat(indent, "[-] ", obj.$className, ": \n", obj.toString(), "\n");
        }
        return log;
    }
    /*******************************************************
     * 2. 静态枚举 Keychain
     *******************************************************/
    function dumpKeychain() {
        var NSMutableDictionary = ObjC.classes.NSMutableDictionary;
        // @ts-ignore
        var kCFBooleanTrue = new ObjC.Object(getExportFunction("d", "kCFBooleanTrue"));
        // @ts-ignore
        var kSecReturnAttributes = new ObjC.Object(getExportFunction("d", "kSecReturnAttributes"));
        // @ts-ignore
        var kSecReturnData = new ObjC.Object(getExportFunction("d", "kSecReturnData"));
        // @ts-ignore
        var kSecReturnRef = new ObjC.Object(getExportFunction("d", "kSecReturnRef"));
        // @ts-ignore
        var kSecMatchLimitAll = ObjC.Object(getExportFunction("d", "kSecMatchLimitAll"));
        // @ts-ignore
        var kSecMatchLimit = ObjC.Object(getExportFunction("d", "kSecMatchLimit"));
        // @ts-ignore
        var kSecClassGenericPassword = ObjC.Object(getExportFunction("d", "kSecClassGenericPassword"));
        // @ts-ignore
        var kSecClassInternetPassword = ObjC.Object(getExportFunction("d", "kSecClassInternetPassword"));
        // @ts-ignore
        var kSecClassCertificate = ObjC.Object(getExportFunction("d", "kSecClassCertificate"));
        // @ts-ignore
        var kSecClassKey = ObjC.Object(getExportFunction("d", "kSecClassKey"));
        // @ts-ignore
        var kSecClassIdentity = ObjC.Object(getExportFunction("d", "kSecClassIdentity"));
        // @ts-ignore
        var kSecClass = ObjC.Object(getExportFunction("d", "kSecClass"));
        //ref: https://github.com/seemoo-lab/apple-continuity-tools/blob/565f2a95d8c3a958ffb430a5022a2df923eb5c1b/keychain_access/frida_scripts/hook_SecItemCopyMatching.js
        // @ts-ignore
        var kSecAttrAccessibleAfterFirstUnlock = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleAfterFirstUnlock"));
        // @ts-ignore
        var kSecAttrAccessibleWhenUnlocked = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleWhenUnlocked"));
        // @ts-ignore
        var kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly"));
        // @ts-ignore
        var kSecAttrAccessibleAlwaysThisDeviceOnly = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleAlwaysThisDeviceOnly"));
        // @ts-ignore
        var kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly"));
        // @ts-ignore
        var kSecAttrAccessibleWhenUnlockedThisDeviceOnly = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleWhenUnlockedThisDeviceOnly"));
        // @ts-ignore
        var kSecAttrAccessibleAlways = ObjC.Object(getExportFunction("d", "kSecAttrAccessibleAlways"));
        // @ts-ignore
        var SecItemCopyMatching = getExportFunction("f", "SecItemCopyMatching", "int", ["pointer", "pointer"]);
        var classes = [
            kSecClassGenericPassword,
            kSecClassInternetPassword,
            kSecClassCertificate,
            kSecClassKey,
            kSecClassIdentity
        ];
        // 逐个枚举
        var query = NSMutableDictionary.alloc().init();
        var log = "";
        log = log.concat(COLORS.green, "[*] ENTER dump keychain", COLORS.resetColor, "\n");
        var indent = "";
        classes.forEach(function (secItemClass) {
            indent = "    ";
            log = log.concat(indent, COLORS.green, "[*] ENTER dump item", COLORS.resetColor, "\n");
            query.removeAllObjects();
            query.setObject_forKey_(kCFBooleanTrue, kSecReturnAttributes);
            query.setObject_forKey_(kCFBooleanTrue, kSecReturnData);
            query.setObject_forKey_(kCFBooleanTrue, kSecReturnRef);
            query.setObject_forKey_(kSecMatchLimitAll, kSecMatchLimit);
            query.setObject_forKey_(secItemClass, kSecClass);
            var resultPtr = Memory.alloc(Process.pointerSize);
            resultPtr.writePointer(NULL);
            // @ts-ignore
            var status = SecItemCopyMatching(query.handle, resultPtr);
            // errSecSuccess = 0
            log = log.concat(indent, COLORS.resetColor, "[+] status: ", status, COLORS.resetColor, "\n");
            if (status === 0) {
                var outPtr = resultPtr.readPointer();
                log = log.concat(indent, COLORS.resetColor, "[+] object: \n", dumpKeychainObject(outPtr, "   " + indent), COLORS.resetColor, "\n");
            }
            else {
                // 没有数据时不会返回0
                // console.log("[*] No items for", secItemClass.toString(), " => status =", status);
                log = log.concat(indent, COLORS.resetColor, "[-] object: null", COLORS.resetColor, "\n");
            }
            log = log.concat(indent, COLORS.green, "[*] EXIT dump item", COLORS.resetColor, "\n");
        });
        log = log.concat(COLORS.green, "\n[*] EXIT dump keychain", COLORS.resetColor, "\n");
        filterLog(log, CIPHER_CONFIG.keychain.filter);
    }
    /*******************************************************
     * 3. 动态 Hook Keychain API
     *******************************************************/
    function keychainInterceptor() {
        // 3.1 Hook SecItemAdd
        var SecItemAddPtr = Module.findExportByName(null, "SecItemAdd");
        if (SecItemAddPtr) {
            Interceptor.attach(SecItemAddPtr, {
                onEnter: function (args) {
                    this.log = "";
                    this.log = this.log.concat(COLORS.green, "[*] ENTER SecItemAdd", COLORS.resetColor, "\n");
                    this.attrsPtr = args[0];
                    this.resultPtr = args[1];
                    this.log = this.log.concat("[+] attrs: \n", dumpKeychainObject(this.attrsPtr, "    "), "\n");
                },
                onLeave: function (retval) {
                    this.log = this.log.concat("[+] status: ", retval.toInt32(), "\n");
                    if (this.resultPtr.toInt32() !== 0) {
                        var outCF = this.resultPtr.readPointer();
                        if (isObjC(outCF)) {
                            this.log = this.log.concat("[+] result: \n", dumpKeychainObject(this.resultPtr, "    "), "\n");
                        }
                        else {
                            this.log = this.log.concat("[-] result: null", "\n");
                        }
                    }
                    else {
                        this.log = this.log.concat("[-] result: null", "\n");
                    }
                    if (CIPHER_CONFIG.keychain.printStack) {
                        this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                    }
                    this.log = this.log.concat(COLORS.green, "[*] EXIT SecItemAdd", COLORS.resetColor, "\n");
                    filterLog(this.log, CIPHER_CONFIG.keychain.filter);
                }
            });
        }
        // 3.2 Hook SecItemCopyMatching
        var SecItemCopyMatchingPtr = Module.findExportByName(null, "SecItemCopyMatching");
        if (SecItemCopyMatchingPtr) {
            Interceptor.attach(SecItemCopyMatchingPtr, {
                onEnter: function (args) {
                    this.log = "";
                    this.log = this.log.concat(COLORS.green, "[*] ENTER SecItemCopyMatching", COLORS.resetColor, "\n");
                    this.queryPtr = args[0];
                    this.resultPtr = args[1];
                    this.log = this.log.concat("[+] query: \n", dumpKeychainObject(this.queryPtr, "    "), "\n");
                },
                onLeave: function (retval) {
                    let status = retval.toInt32();
                    this.log = this.log.concat("[+] status: ", status, "\n");
                    if (this.resultPtr.toInt32() !== 0) {
                        let resultObj = this.resultPtr.readPointer();
                        if (isObjC(resultObj)) {
                            this.log = this.log.concat("[+] result: \n", dumpKeychainObject(resultObj, "    "), "\n");
                        }
                        else {
                            this.log = this.log.concat("[-] result: null", "\n");
                        }
                    }
                    else {
                        this.log = this.log.concat("[-] result: null", "\n");
                    }
                    if (CIPHER_CONFIG.keychain.printStack) {
                        this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                    }
                    this.log = this.log.concat(COLORS.green, "[*] EXIT SecItemCopyMatching", COLORS.resetColor, "\n");
                    filterLog(this.log, CIPHER_CONFIG.keychain.filter);
                }
            });
        }
        // 3.3 Hook SecItemUpdate
        var SecItemUpdatePtr = Module.findExportByName(null, "SecItemUpdate");
        if (SecItemUpdatePtr) {
            Interceptor.attach(SecItemUpdatePtr, {
                onEnter: function (args) {
                    this.log = "";
                    this.log = this.log.concat(COLORS.green, "[*] ENTER SecItemUpdate", COLORS.resetColor, "\n");
                    this.queryPtr = args[0];
                    this.attrsPtr = args[1];
                    this.log = this.log.concat("[+] query: \n", dumpKeychainObject(this.queryPtr, "    "), "\n");
                    this.log = this.log.concat("[+] attributesToUpdate: \n", dumpKeychainObject(this.attrsPtr, "    "), "\n");
                },
                onLeave: function (retval) {
                    let status = retval.toInt32();
                    this.log = this.log.concat("[+] status: ", status, "\n");
                    if (CIPHER_CONFIG.keychain.printStack) {
                        this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                    }
                    this.log = this.log.concat(COLORS.green, "[*] EXIT SecItemUpdate", COLORS.resetColor, "\n");
                    filterLog(this.log, CIPHER_CONFIG.keychain.filter);
                }
            });
        }
        // 3.4 Hook SecItemDelete
        var SecItemDeletePtr = Module.findExportByName(null, "SecItemDelete");
        if (SecItemDeletePtr) {
            Interceptor.attach(SecItemDeletePtr, {
                onEnter: function (args) {
                    this.log = "";
                    this.log = this.log.concat(COLORS.green, "[*] ENTER SecItemDelete", COLORS.resetColor, "\n");
                    this.queryPtr = args[0];
                    this.log = this.log.concat("[+] query: \n", dumpKeychainObject(this.queryPtr, "    "), "\n");
                },
                onLeave: function (retval) {
                    this.log = this.log.concat("[+] status: ", retval.toInt32(), "\n");
                    if (CIPHER_CONFIG.keychain.printStack) {
                        this.log = this.log.concat(COLORS.blue, "[+] stack:\n", Thread.backtrace(this.context, STACKTRACE_MODE).map(DebugSymbol.fromAddress).join("\n"), COLORS.resetColor, "\n");
                    }
                    this.log = this.log.concat(COLORS.green, "[*] EXIT SecItemDelete", COLORS.resetColor, "\n");
                    filterLog(this.log, CIPHER_CONFIG.keychain.filter);
                }
            });
        }
    }
    if (isSpawned()) {
        let intervalId = setInterval(function () {
            clearInterval(intervalId);
            dumpKeychain();
        }, 5000);
    }
    else {
        dumpKeychain();
    }
    if (CIPHER_CONFIG.keychain.realtimeIntercept) {
        keychainInterceptor();
    }
}
//start
(function () {
    if (!ObjC.available) {
        console.log("Only supports iOS!!");
        return;
    }
    if (!CIPHER_CONFIG.enable) {
        return;
    }
    if (CIPHER_CONFIG.crypto.enable) {
        commonCryptoInterceptor();
    }
    if (CIPHER_CONFIG.hash.enable) {
        if (CIPHER_CONFIG.hash.sha1) {
            //extern unsigned char *CC_SHA1(const void *data, CC_LONG len, unsigned char *md)
            commonHashInterceptor("CC_SHA1", 20);
        }
        if (CIPHER_CONFIG.hash.sha224) {
            //extern unsigned char *CC_SHA224(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_SHA224", 28);
        }
        if (CIPHER_CONFIG.hash.sha256) {
            //extern unsigned char *CC_SHA256(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_SHA256", 32);
        }
        if (CIPHER_CONFIG.hash.sha384) {
            //extern unsigned char *CC_SHA384(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_SHA384", 48);
        }
        if (CIPHER_CONFIG.hash.sha512) {
            //extern unsigned char *CC_SHA512(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_SHA512", 64);
        }
        if (CIPHER_CONFIG.hash.md2) {
            //extern unsigned char *CC_MD2(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_MD2", 16);
        }
        if (CIPHER_CONFIG.hash.md4) {
            //extern unsigned char *CC_MD4(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_MD4", 16);
        }
        if (CIPHER_CONFIG.hash.md5) {
            //extern unsigned char *CC_MD5(const void *data, CC_LONG len, unsigned char *md);
            commonHashInterceptor("CC_MD5", 16);
        }
    }
    if (CIPHER_CONFIG.hmac.enable) {
        commonHMACInterceptor();
    }
    if (CIPHER_CONFIG.pbkdf.enable) {
        commonPBKDFInterceptor();
    }
    if (CIPHER_CONFIG.keychain.enable) {
        commonKeychainInterceptor();
    }
})();